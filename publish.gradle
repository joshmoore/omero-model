/**
 * Function to collect runtime components excluding what we've marked as
 * {@code dependencies{ provided 'xx' }}
 * @return unzipped "compile" dependencies
 */
def collectOmeroJars() {
    // Remove provided jars from runtimeClasspath configuration
    def diff = configurations.runtimeClasspath - configurations.provided
    return diff.collect { it.isDirectory() ? it : zipTree(it) }
}

task customJar(type: Jar) {
    from sourceSets.main.output // Include self compiled
    from collectOmeroJars()
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc
}

publishing {
    publications {
        modelJava(MavenPublication) {
            artifact customJar
            artifact sourceJar
            artifact javadocJar

            // Edit pom to mark "provided" as dependencies
            pom.withXml { xml ->
                def dependenciesNode = xml.asNode().appendNode('dependencies')
                configurations.provided.allDependencies.each {
                    if (!(it instanceof SelfResolvingDependency)) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
                def repositoriesNode = xml.asNode().appendNode('repositories')
                project.repositories.each {
                    if (!(it.name.toLowerCase().startsWith('maven'))) {
                        def repositoryNode = repositoriesNode.appendNode('repository')
                        repositoryNode.appendNode('id', it.name)
                        repositoryNode.appendNode('name', it.name)
                        repositoryNode.appendNode('url', it.url)
                    }
                }
            }
        }
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}